@inherits LayoutComponentBase

@inject AuthenticationStateProvider AuthenticationStateProvider

@implements IDisposable

<div class="page">
    <div class="sidebar">
        <NavMenu />
    </div>

    <main>
        <div class="top-row px-4">
            <AuthorizeView>
                <Authorized>
                    <a href="/employees/@UserId">@UserName</a>
                    <a href="/logout">Logout</a>
                </Authorized>
                <NotAuthorized>
                    <a href="/login">Login</a>
                </NotAuthorized>
            </AuthorizeView>
        </div>

        <article class="content px-4">
            @Body
        </article>
    </main>
</div>

<div id="blazor-error-ui">
    An unhandled error has occurred.
    <a href="" class="reload">Reload</a>
    <a class="dismiss">🗙</a>
</div>

@code {
    [CascadingParameter]
    private Task<AuthenticationState> AuthState { get; set; } = default!;

    private string? UserId { get; set; }
    private string? UserName { get; set; }

    public void Dispose() => this.AuthenticationStateProvider.AuthenticationStateChanged -= this.HandleAuthStateChanged;

    protected override async Task OnInitializedAsync()
    {
        await this.SetUserInfoAsync(this.AuthState);

        this.AuthenticationStateProvider.AuthenticationStateChanged += this.HandleAuthStateChanged;
    }

    private async void HandleAuthStateChanged(Task<AuthenticationState> authState) => await this.SetUserInfoAsync(authState);

    private async Task SetUserInfoAsync(Task<AuthenticationState> authState)
    {
        var auth = await this.AuthState;
        this.UserId = auth.User.GetId();
        this.UserName = auth.User.Identity?.Name;
    }
}
