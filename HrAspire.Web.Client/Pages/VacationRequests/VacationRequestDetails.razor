@page "/vacation-requests/{id:int}"

@attribute [Authorize]

@inject VacationRequestsApiClient VacationRequestsApiClient
@inject NavigationManager NavigationManager

<PageTitle>Vacation Request - HR Aspire</PageTitle>

<h1>
    Vacation Request - @VacationRequest?.EmployeeFullName

    @if (VacationRequest is not null)
    {
        if (IsUserCurrentEmployee)
        {
            <button type="button"
                    class="btn btn-danger float-end ms-2"
                    data-bs-toggle="modal"
                    data-bs-target="#delete-vacation-request-modal">

                Delete
            </button>

            <a href="/vacation-request-update/@VacationRequest.Id" class="btn btn-primary float-end">Update</a>
        }

        if (VacationRequest.Status == VacationRequestStatus.Pending)
        {
            <AuthorizeView Roles="@BusinessConstants.ManagerRole">
                <button type="button"
                        class="btn btn-danger float-end ms-2"
                        data-bs-toggle="modal"
                        data-bs-target="#reject-vacation-request-modal">

                    Reject
                </button>

                <button type="button"
                        class="btn btn-primary float-end ms-2"
                        data-bs-toggle="modal"
                        data-bs-target="#approve-vacation-request-modal">

                    Approve
                </button>
            </AuthorizeView>
        }
    }
</h1>
<hr />

<StatusMessage IsError="true" Message="@ErrorMessage" />

@if (VacationRequest is not null)
{
    <AuthorizeView Roles="@BusinessConstants.ManagerRole">
        <Modal Id="approve-vacation-request-modal"
               Title="Approve Vacation Request"
               Body="Are you sure you want to approve this vacation request?"
               Confirmed="ApproveVacationRequestAsync" />

        <Modal Id="reject-vacation-request-modal"
               Title="Reject Vacation Request"
               Body="Are you sure you want to reject this vacation request?"
               Confirmed="RejectVacationRequestAsync" />
    </AuthorizeView>

    @if (IsUserCurrentEmployee)
    {
        <Modal Id="delete-vacation-request-modal"
               Title="Delete Vacation Request"
               Body="Are you sure you want to delete this vacation request?"
               Confirmed="DeleteVacationRequestAsync" />
    }

    <div class="card">
        <div class="card-body">
            <div class="table-responsive">
                <table class="table table-striped table-product">
                    <tbody>
                        <tr>
                            <td width="390">Employee</td>
                            <td>
                                <a href="/employees/@VacationRequest.EmployeeId">@VacationRequest.EmployeeFullName</a>
                            </td>
                        </tr>
                        <tr>
                            <td>Type</td>
                            <td>@VacationRequest.Type</td>
                        </tr>
                        <tr>
                            <td>From Date</td>
                            <td>@VacationRequest.FromDate.ToString(Constants.DateFormat)</td>
                        </tr>
                        <tr>
                            <td>To Date</td>
                            <td>@VacationRequest.ToDate.ToString(Constants.DateFormat)</td>
                        </tr>
                        <tr>
                            <td>Work Days</td>
                            <td>@VacationRequest.WorkDays</td>
                        </tr>
                        <tr>
                            <td>Notes</td>
                            <td>@VacationRequest.Notes</td>
                        </tr>
                        <tr>
                            <td>Status</td>
                            <td>
                                <span class="@StatusCssClass">@VacationRequest.Status</span>
                            </td>
                        </tr>
                        <tr>
                            <td>Status on</td>
                            <td>@VacationRequest.StatusChangedOn?.ToLocalTime().ToString(Constants.DateTimeFormat)</td>
                        </tr>
                        <tr>
                            <td>Status by</td>
                            <td>
                                @if (!string.IsNullOrWhiteSpace(VacationRequest.StatusChangedById))
                                {
                                    <a href="/employees/@VacationRequest.StatusChangedById">@VacationRequest.StatusChangedByFullName</a>
                                }
                            </td>
                        </tr>
                        <tr>
                            <td>Created on</td>
                            <td>@VacationRequest.CreatedOn.ToLocalTime().ToString(Constants.DateTimeFormat)</td>
                        </tr>
                    </tbody>
                </table>
            </div>
        </div>
    </div>
}

@code {
    [Parameter]
    public int Id { get; set; }

    [CascadingParameter]
    private Task<AuthenticationState> AuthState { get; set; } = default!;

    private bool IsUserCurrentEmployee { get; set; }

    private VacationRequestDetailsResponseModel? VacationRequest { get; set; }

    private string? ErrorMessage { get; set; }

    private string? StatusCssClass
        => VacationRequest?.Status switch
        {
            VacationRequestStatus.Approved => "badge bg-success",
            VacationRequestStatus.Rejected => "badge bg-danger",
            _ => "badge bg-secondary",
        };

    protected override async Task OnParametersSetAsync()
    {
        await this.LoadVacationRequestAsync();

        var authState = await this.AuthState;
        this.IsUserCurrentEmployee = authState.User.GetId() == this.VacationRequest?.EmployeeId;
    }

    private async Task LoadVacationRequestAsync()
        => (this.VacationRequest, this.ErrorMessage) = await this.VacationRequestsApiClient.GetVacationRequestAsync(this.Id);

    private async Task ApproveVacationRequestAsync()
    {
        this.ErrorMessage = null;

        var errorMessage = await this.VacationRequestsApiClient.ApproveVacationRequestAsync(this.Id);
        if (string.IsNullOrWhiteSpace(errorMessage))
        {
            await this.LoadVacationRequestAsync();
        }
        else
        {
            this.ErrorMessage = errorMessage;
        }
    }

    private async Task RejectVacationRequestAsync()
    {
        this.ErrorMessage = null;

        var errorMessage = await this.VacationRequestsApiClient.RejectVacationRequestAsync(this.Id);
        if (string.IsNullOrWhiteSpace(errorMessage))
        {
            await this.LoadVacationRequestAsync();
        }
        else
        {
            this.ErrorMessage = errorMessage;
        }
    }

    private async Task DeleteVacationRequestAsync()
    {
        this.ErrorMessage = null;

        var errorMessage = await this.VacationRequestsApiClient.DeleteVacationRequestAsync(this.Id);
        if (string.IsNullOrWhiteSpace(errorMessage))
        {
            this.NavigationManager.NavigateTo($"/employees/{this.VacationRequest?.EmployeeId}");
        }
        else
        {
            this.ErrorMessage = errorMessage;
        }
    }
}
