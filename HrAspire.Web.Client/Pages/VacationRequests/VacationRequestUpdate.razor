@page "/vacation-request-update/{id:int}"

@attribute [Authorize]

@inject VacationRequestsApiClient VacationRequestsApiClient
@inject NavigationManager NavigationManager

<PageTitle>Update Vacation Request - HR Aspire</PageTitle>

<h1>Update Vacation Request</h1>
<hr />

@if (Input is not null)
{
    <div class="row">
        <div class="col-md-4">
            <section>
                <StatusMessage Message="@ErrorMessage" IsError="true" />
                <EditForm Model="Input" OnValidSubmit="UpdateVacationRequestAsync">
                    <FluentValidationValidator DisableAssemblyScanning="true" />
                    <ValidationSummary class="text-danger" role="alert" />
                    <div class="form-floating mb-3">
                        <InputSelect @bind-Value="Input.Type" class="form-control" placeholder="type">
                            <option value="">Select...</option>

                            @foreach (var type in Enum.GetValues<VacationRequestType>())
                            {
                                <option value="@type">@type</option>
                            }
                        </InputSelect>
                        <label for="type" class="form-label">Type</label>
                        <ValidationMessage For="() => Input.Type" class="text-danger" />
                    </div>
                    <div class="form-floating mb-3">
                        <InputDate @bind-Value="Input.FromDate" class="form-control" aria-required="true" />
                        <label for="from-date" class="form-label">From Date</label>
                        <ValidationMessage For="() => Input.FromDate" class="text-danger" />
                    </div>
                    <div class="form-floating mb-3">
                        <InputDate @bind-Value="Input.ToDate" class="form-control" aria-required="true" />
                        <label for="to-date" class="form-label">To Date</label>
                        <ValidationMessage For="() => Input.ToDate" class="text-danger" />
                    </div>
                    <div class="form-floating mb-3">
                        <InputTextArea @bind-Value="Input.Notes" class="form-control floating-label-textarea" placeholder="notes" />
                        <label for="notes" class="form-label">Notes</label>
                        <ValidationMessage For="() => Input.Notes" class="text-danger" />
                    </div>

                    <div>
                        <button type="submit" class="w-100 btn btn-lg btn-primary">Update</button>
                    </div>
                </EditForm>
            </section>
        </div>
    </div>
}

@code {
    [Parameter]
    public int Id { get; set; }

    private VacationRequestUpdateRequestModel? Input { get; set; }

    private string? ErrorMessage { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        var (vacationRequest, _) = await this.VacationRequestsApiClient.GetVacationRequestAsync(this.Id);
        this.Input = vacationRequest?.ToUpdateRequestModel();
    }

    private async Task UpdateVacationRequestAsync()
    {
        this.ErrorMessage = null;

        var errorMessage = await this.VacationRequestsApiClient.UpdateVacationRequestAsync(this.Id, this.Input!);
        if (string.IsNullOrWhiteSpace(errorMessage))
        {
            this.NavigationManager.NavigateTo($"/vacation-requests/{this.Id}");
        }
        else
        {
            this.ErrorMessage = errorMessage;
        }
    }
}
