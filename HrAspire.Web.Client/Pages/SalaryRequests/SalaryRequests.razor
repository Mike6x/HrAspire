@page "/salary-requests"

@attribute [Authorize(Roles = BusinessConstants.HrManagerRole)]

@inject SalaryRequestsApiClient SalaryRequestsApiClient

<PageTitle>Salary Requests - HR Aspire</PageTitle>

<h1>Salary Requests</h1>
<hr />

<QuickGrid ItemsProvider="GridSalaryRequestsProvider" Pagination="Pagination" Class="table table-bordered table-striped">
    <TemplateColumn Title="Employee">
        <a href="/employees/@context.EmployeeId">@context.EmployeeFullName</a>
    </TemplateColumn>
    <PropertyColumn Property="@(e => e.NewSalary)" Title="New Salary" Format="@Constants.MoneyFormat" />
    <PropertyColumn Property="@(e => e.Status)" />
    <TemplateColumn Title="Created on">
        @context.CreatedOn.ToLocalTime().ToString(Constants.DateTimeFormat)
    </TemplateColumn>

    <TemplateColumn Title="Operations">
        <a href="/salary-requests/@context.Id">View</a>

        @if (!IsUserHrManager)
        {
            <a href="/salary-request-update/@context.Id">Update</a>
        }
    </TemplateColumn>
</QuickGrid>

<Paginator State="Pagination"></Paginator>

@code {
    [CascadingParameter]
    private Task<AuthenticationState> AuthState { get; set; } = default!;

    private GridItemsProvider<SalaryRequestResponseModel>? GridSalaryRequestsProvider { get; set; }
    private PaginationState Pagination { get; set; } = new() { ItemsPerPage = 10 };

    private bool IsUserHrManager { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var authState = await this.AuthState;
        this.IsUserHrManager = authState.User.IsInRole(BusinessConstants.HrManagerRole);

        this.GridSalaryRequestsProvider = this.GetGridSalaryRequestsAsync;
    }

    private async ValueTask<GridItemsProviderResult<SalaryRequestResponseModel>> GetGridSalaryRequestsAsync(
        GridItemsProviderRequest<SalaryRequestResponseModel> request)
    {
        var pageNumber = request.StartIndex / this.Pagination.ItemsPerPage;

        var data = await this.SalaryRequestsApiClient.GetSalaryRequestsAsync(pageNumber, this.Pagination.ItemsPerPage);

        return GridItemsProviderResult.From(data.SalaryRequests, data.Total);
    }
}
