@page "/salary-requests/{id:int}"

@attribute [Authorize]

@inject SalaryRequestsApiClient SalaryRequestsApiClient
@inject NavigationManager NavigationManager

<h1>
    Salary Request - @SalaryRequest?.EmployeeFullName

    @* TODO: *@
    @* @if (SalaryRequest is not null)
    {
        <button type="button" class="btn btn-danger float-end ms-2" data-bs-toggle="modal" data-bs-target="#delete-employee-modal">
            Delete
        </button>

        <a href="/employee-update/@Employee.Id" class="btn btn-primary float-end">Update</a>
    } *@
</h1>
<hr />

<StatusMessage IsError="true" Message="@ErrorMessage" />

@if (SalaryRequest is not null)
{
    <Modal Id="delete-salary-request-modal"
           Title="Delete Salary Request"
           Body="Are you sure you want to delete this salary request?"
           Confirmed="DeleteSalaryRequestAsync" />

    <div class="card">
        <div class="card-body">
            <div class="table-responsive">
                <table class="table table-striped table-product">
                    <tbody>
                        <tr>
                            <td width="390">Employee</td>
                            <td>
                                <a href="/employees/@SalaryRequest.EmployeeId">@SalaryRequest.EmployeeFullName</a>
                            </td>
                        </tr>
                        <tr>
                            <td>New Salary</td>
                            <td>@SalaryRequest.NewSalary.ToString("n2")</td>
                        </tr>
                        <tr>
                            <td>Notes</td>
                            <td>@SalaryRequest.Notes</td>
                        </tr>
                        <tr>
                            <td>Status</td>
                            <td>@SalaryRequest.Status</td>
                        </tr>
                        <tr>
                            <td>Status on</td>
                            <td>@SalaryRequest.StatusChangedOn?.ToString(Constants.DateTimeFormat)</td>
                        </tr>
                        <tr>
                            <td>Status by</td>
                            <td>
                                @if (!string.IsNullOrWhiteSpace(SalaryRequest.StatusChangedById))
                                {
                                    <a href="/employees/@SalaryRequest.StatusChangedById">@SalaryRequest.StatusChangedByFullName</a>
                                }
                            </td>
                        </tr>
                        <tr>
                            <td>Created on</td>
                            <td>@SalaryRequest.CreatedOn.ToString(Constants.DateTimeFormat)</td>
                        </tr>
                        <tr>
                            <td>Created by</td>
                            <td>
                                @if (!string.IsNullOrWhiteSpace(SalaryRequest.CreatedById))
                                {
                                    <a href="/employees/@SalaryRequest.CreatedById">@SalaryRequest.CreatedByFullName</a>
                                }
                            </td>
                        </tr>
                    </tbody>
                </table>
            </div>
        </div>
    </div>
}

@code {
    [Parameter]
    public int Id { get; set; }

    private SalaryRequestDetailsResponseModel? SalaryRequest { get; set; }

    private string? ErrorMessage { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        this.ErrorMessage = null;

        this.SalaryRequest = await this.SalaryRequestsApiClient.GetSalaryRequestAsync(this.Id);
        if (this.SalaryRequest is null)
        {
            this.ErrorMessage = "No such salary request found.";
        }
    }

    private async Task DeleteSalaryRequestAsync()
    {
        this.ErrorMessage = null;

        var errorMessage = await this.SalaryRequestsApiClient.DeleteSalaryRequestAsync(this.Id);
        if (string.IsNullOrWhiteSpace(errorMessage))
        {
            this.NavigationManager.NavigateTo($"/employees/{this.SalaryRequest?.EmployeeId}");
        }
        else
        {
            this.ErrorMessage = errorMessage;
        }
    }
}
