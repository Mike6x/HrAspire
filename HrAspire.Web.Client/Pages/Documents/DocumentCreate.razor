@page "/document-create/{employeeId}"

@attribute [Authorize(Roles = BusinessConstants.ManagerAndHrManagerRoles)]

@inject DocumentsApiClient DocumentsApiClient
@inject NavigationManager NavigationManager

<PageTitle>Create Document - HR Aspire</PageTitle>

<h1>Create Document</h1>
<hr />

<div class="row">
    <div class="col-md-4">
        <section>
            <StatusMessage Message="@ErrorMessage" IsError="true" />
            <EditForm Model="Input" OnValidSubmit="CreateDocumentAsync">
                <FluentValidationValidator DisableAssemblyScanning="true" />
                <ValidationSummary class="text-danger" role="alert" />
                <div class="form-floating mb-3">
                    <InputText @bind-Value="Input.Title" class="form-control" aria-required="true" placeholder="title" />
                    <label for="title" class="form-label">Title</label>
                    <ValidationMessage For="() => Input.Title" class="text-danger" />
                </div>
                <div class="form-floating mb-3">
                    <InputTextArea @bind-Value="Input.Description" class="form-control floating-label-textarea" placeholder="description" />
                    <label for="description" class="form-label">Description</label>
                    <ValidationMessage For="() => Input.Description" class="text-danger" />
                </div>
                <div class="mb-3">
                    <InputFile OnChange="OnFileChangedAsync" class="form-control form-control-lg" />
                </div>

                <div>
                    <button type="submit" class="w-100 btn btn-lg btn-primary">Create</button>
                </div>
            </EditForm>
        </section>
    </div>
</div>

@code {
    [Parameter]
    public string EmployeeId { get; set; } = default!;

    private DocumentCreateRequestModel Input { get; set; } = new();

    private string? ErrorMessage { get; set; }

    private async Task CreateDocumentAsync()
    {
        this.ErrorMessage = null;

        var (newDocumentId, errorMessage) = await this.DocumentsApiClient.CreateDocumentAsync(this.EmployeeId, this.Input);
        if (string.IsNullOrWhiteSpace(errorMessage))
        {
            this.NavigationManager.NavigateTo($"/documents/{newDocumentId}");
        }
        else
        {
            this.ErrorMessage = errorMessage;
        }
    }

    private async Task OnFileChangedAsync(InputFileChangeEventArgs ev)
    {
        this.ErrorMessage = null;

        if (ev.File is null)
        {
            this.ErrorMessage = "Document file is required.";
            return;
        }

        try
        {

            await using var memoryStream = new MemoryStream();
            await ev.File.OpenReadStream(Constants.DocumentMaxFileSizeInB).CopyToAsync(memoryStream);
            this.Input.FileContent = memoryStream.ToArray();
        }
        catch (Exception)
        {
            this.ErrorMessage = $"Max document file size is {Constants.DocumentMaxFileSizeInMB} MB.";
            return;
        }

        if (this.Input.FileContent.Length > 0)
        {
            this.Input.FileName = ev.File.Name;
        }
        else
        {
            this.ErrorMessage = "Document file cannot be empty.";
        }
    }
}
