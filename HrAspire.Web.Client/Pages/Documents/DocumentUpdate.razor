@page "/document-update/{id:int}"

@attribute [Authorize(Roles = BusinessConstants.ManagerAndHrManagerRoles)]

@inject DocumentsApiClient DocumentsApiClient
@inject NavigationManager NavigationManager

<PageTitle>Update Document - HR Aspire</PageTitle>

<h1>Update Document</h1>
<hr />

@if (Input is not null)
{
    <div class="row">
        <div class="col-md-4">
            <section>
                <StatusMessage Message="@ErrorMessage" IsError="true" />
                <EditForm Model="Input" OnValidSubmit="UpdateDocumentAsync">
                    <FluentValidationValidator DisableAssemblyScanning="true" />
                    <ValidationSummary class="text-danger" role="alert" />
                    <div class="form-floating mb-3">
                        <InputText @bind-Value="Input.Title" class="form-control" aria-required="true" placeholder="title" />
                        <label for="title" class="form-label">Title</label>
                        <ValidationMessage For="() => Input.Title" class="text-danger" />
                    </div>
                    <div class="form-floating mb-3">
                        <InputTextArea @bind-Value="Input.Description" class="form-control floating-label-textarea" placeholder="description" />
                        <label for="description" class="form-label">Description</label>
                        <ValidationMessage For="() => Input.Description" class="text-danger" />
                    </div>
                    <div class="mb-3">
                        <InputFile OnChange="OnFileChangedAsync" class="form-control form-control-lg" />
                    </div>

                    <div>
                        <button type="submit" class="w-100 btn btn-lg btn-primary">Update</button>
                    </div>
                </EditForm>
            </section>
        </div>
    </div>
}

@code {
    [Parameter]
    public int Id { get; set; }

    [CascadingParameter]
    private Task<AuthenticationState> AuthState { get; set; } = default!;

    private DocumentUpdateRequestModel? Input { get; set; }

    private string UserId { get; set; } = default!;

    private string? ErrorMessage { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var authState = await this.AuthState;
        this.UserId = authState.User.GetId()!;
    }

    protected override async Task OnParametersSetAsync()
    {
        var (document, _) = await this.DocumentsApiClient.GetDocumentAsync(this.Id);
        if (document?.CreatedById == this.UserId)
        {
            this.Input = document.ToUpdateRequestModel();
        }
        else
        {
            this.Input = null;
        }
    }

    private async Task UpdateDocumentAsync()
    {
        this.ErrorMessage = null;

        var errorMessage = await this.DocumentsApiClient.UpdateDocumentAsync(this.Id, this.Input!);
        if (string.IsNullOrWhiteSpace(errorMessage))
        {
            this.NavigationManager.NavigateTo($"/documents/{this.Id}");
        }
        else
        {
            this.ErrorMessage = errorMessage;
        }
    }

    private async Task OnFileChangedAsync(InputFileChangeEventArgs ev)
    {
        this.ErrorMessage = null;

        if (ev.File is null)
        {
            return;
        }

        try
        {

            await using var memoryStream = new MemoryStream();
            await ev.File.OpenReadStream(Constants.DocumentMaxFileSizeInB).CopyToAsync(memoryStream);
            this.Input!.FileContent = memoryStream.ToArray();
        }
        catch (Exception)
        {
            this.ErrorMessage = $"Max document file size is {Constants.DocumentMaxFileSizeInMB} MB.";
            return;
        }

        if (this.Input.FileContent.Length > 0)
        {
            this.Input.FileName = ev.File.Name;
        }
        else
        {
            this.ErrorMessage = "Document file cannot be empty.";
        }
    }
}
