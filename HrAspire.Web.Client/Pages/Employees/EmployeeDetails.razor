@page "/employees/{id}"

@attribute [Authorize(Roles = BusinessConstants.ManagerAndHrManagerRoles)]

@inject EmployeesApiClient EmployeesApiClient
@inject DocumentsApiClient DocumentsApiClient
@inject SalaryRequestsApiClient SalaryRequestsApiClient
@inject NavigationManager NavigationManager

<h1>
    Employee - @Employee?.FullName

    @if (Employee is not null)
    {
        <button type="button" class="btn btn-danger float-end ms-2" data-bs-toggle="modal" data-bs-target="#delete-employee-modal">
            Delete
        </button>

        <a href="/employee-update/@Employee.Id" class="btn btn-primary float-end">Update</a>
    }
</h1>
<hr />

<StatusMessage IsError="true" Message="@ErrorMessage" />

@if (Employee is not null)
{
    <Modal Id="delete-employee-modal"
           Title="Delete Employee"
           Body="Are you sure you want to delete this employee?"
           Confirmed="DeleteEmployeeAsync" />

    <div class="card">
        <div class="card-body">
            <div class="table-responsive">
                <table class="table table-striped table-product">
                    <tbody>
                        <tr>
                            <td width="390">Email</td>
                            <td>
                                <a href="mailto:@Employee.Email">@Employee.Email</a>
                            </td>
                        </tr>
                        <tr>
                            <td>Full Name</td>
                            <td>@Employee.FullName</td>
                        </tr>
                        <tr>
                            <td>Role</td>
                            <td>@(Employee.Role ?? "Employee")</td>
                        </tr>
                        <tr>
                            <td>Date of Birth</td>
                            <td>@Employee.DateOfBirth.ToString(Constants.DateFormat)</td>
                        </tr>
                        <tr>
                            <td>Position</td>
                            <td>@Employee.Position</td>
                        </tr>
                        <tr>
                            <td>Department</td>
                            <td>@Employee.Department</td>
                        </tr>
                        <tr>
                            <td>Manager</td>
                            <td>
                                @if (!string.IsNullOrWhiteSpace(Employee.ManagerId))
                                {
                                    <a href="/employees/@Employee.ManagerId">@Employee.ManagerFullName</a>
                                }
                            </td>
                        </tr>
                        <tr>
                            <td>Created on</td>
                            <td>@Employee.CreatedOn.ToLocalTime().ToString(Constants.DateTimeFormat)</td>
                        </tr>
                        <tr>
                            <td>Created by</td>
                            <td>
                                @if (!string.IsNullOrWhiteSpace(Employee.CreatedById))
                                {
                                    <a href="/employees/@Employee.CreatedById">@Employee.CreatedByFullName</a>
                                }
                            </td>
                        </tr>
                    </tbody>
                </table>
            </div>
        </div>
    </div>

    <h3 class="mt-5">
        Documents
        <a href="/document-create/@Id" class="btn btn-primary float-end">Create</a>
    </h3>
    <hr />

    <QuickGrid ItemsProvider="GridDocumentsProvider" Pagination="DocumentsPagination" Class="table table-bordered table-striped">
        <TemplateColumn Title="Title">
            <a href="/documents/@context.Id">@context.Title</a>
        </TemplateColumn>
        <PropertyColumn Property="@(e => e.FileName)" Title="File Name" />
        <TemplateColumn Title="Created on">
            @context.CreatedOn.ToLocalTime().ToString(Constants.DateTimeFormat)
        </TemplateColumn>
    </QuickGrid>

    <Paginator State="DocumentsPagination"></Paginator>

    <h3 class="mt-5">
        Salary Requests
        <a href="/salary-request-create/@Id" class="btn btn-primary float-end">Create</a>
    </h3>
    <hr />

    <QuickGrid ItemsProvider="GridSalaryRequestsProvider" Pagination="SalaryRequestsPagination" Class="table table-bordered table-striped">
        <TemplateColumn Title="New Salary">
            <a href="/salary-requests/@context.Id">@context.NewSalary</a>
        </TemplateColumn>
        <PropertyColumn Property="@(e => e.Status)" />
        <TemplateColumn Title="Created on">
            @context.CreatedOn.ToLocalTime().ToString(Constants.DateTimeFormat)
        </TemplateColumn>
    </QuickGrid>

    <Paginator State="SalaryRequestsPagination"></Paginator>
}

@code {
    [Parameter]
    public string Id { get; set; } = default!;

    private EmployeeDetailsResponseModel? Employee { get; set; }

    private GridItemsProvider<DocumentResponseModel>? GridDocumentsProvider { get; set; }
    private PaginationState DocumentsPagination { get; set; } = new() { ItemsPerPage = 5 };

    private GridItemsProvider<SalaryRequestResponseModel>? GridSalaryRequestsProvider { get; set; }
    private PaginationState SalaryRequestsPagination { get; set; } = new() { ItemsPerPage = 5 };

    private string? ErrorMessage { get; set; }

    protected override void OnInitialized()
    {
        this.GridDocumentsProvider = this.GetGridDocumentsAsync;
        this.GridSalaryRequestsProvider = this.GetGridSalaryRequestsAsync;
    }

    protected override async Task OnParametersSetAsync()
    {
        this.ErrorMessage = null;

        this.Employee = await this.EmployeesApiClient.GetEmployeeAsync(this.Id);
        if (this.Employee is null)
        {
            this.ErrorMessage = "No such employee found.";
        }
    }

    private async Task DeleteEmployeeAsync()
    {
        this.ErrorMessage = null;

        var errorMessage = await this.EmployeesApiClient.DeleteEmployeeAsync(this.Id);
        if (string.IsNullOrWhiteSpace(errorMessage))
        {
            this.NavigationManager.NavigateTo("/employees");
        }
        else
        {
            this.ErrorMessage = errorMessage;
        }
    }

    private async ValueTask<GridItemsProviderResult<DocumentResponseModel>> GetGridDocumentsAsync(
        GridItemsProviderRequest<DocumentResponseModel> request)
    {
        var pageNumber = request.StartIndex / this.DocumentsPagination.ItemsPerPage;

        var data = await this.DocumentsApiClient.GetEmployeeDocumentsAsync(this.Id, pageNumber, this.DocumentsPagination.ItemsPerPage);

        return new GridItemsProviderResult<DocumentResponseModel> { Items = data.Documents, TotalItemCount = data.Total, };
    }

    private async ValueTask<GridItemsProviderResult<SalaryRequestResponseModel>> GetGridSalaryRequestsAsync(
        GridItemsProviderRequest<SalaryRequestResponseModel> request)
    {
        var pageNumber = request.StartIndex / this.SalaryRequestsPagination.ItemsPerPage;

        var data = await this.SalaryRequestsApiClient.GetEmployeeSalaryRequestsAsync(
            this.Id,
            pageNumber,
            this.SalaryRequestsPagination.ItemsPerPage);

        return new GridItemsProviderResult<SalaryRequestResponseModel> { Items = data.SalaryRequests, TotalItemCount = data.Total, };
    }
}
