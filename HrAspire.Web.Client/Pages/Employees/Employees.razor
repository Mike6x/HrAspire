@page "/employees"

@attribute [Authorize(Roles = BusinessConstants.ManagerAndHrManagerRoles)]

@inject EmployeesApiClient EmployeesApiClient

<PageTitle>Employees - HR Aspire</PageTitle>

<h1>
    Employees
    <AuthorizeView Roles="@BusinessConstants.HrManagerRole">
        <a href="/employee-create" class="btn btn-primary float-end">Create</a>
    </AuthorizeView>
</h1>
<hr />

<QuickGrid ItemsProvider="GridEmployeesProvider" Pagination="Pagination" Class="table table-bordered table-striped">
    <PropertyColumn Property="@(e => e.FullName)" />
    <PropertyColumn Property="@(e => e.Email)" />
    <PropertyColumn Property="@(e => e.Position)" />
    <PropertyColumn Property="@(e => e.Department)" />
    <TemplateColumn Title="Created on">
        @context.CreatedOn.ToLocalTime().ToString(Constants.DateTimeFormat)
    </TemplateColumn>

    <TemplateColumn Title="Operations">
        <a href="/employees/@context.Id">View</a>

        <AuthorizeView Roles="@BusinessConstants.HrManagerRole" Context="authState">
            <a href="/employee-update/@context.Id" class="ms-3">Update</a>
        </AuthorizeView>
    </TemplateColumn>
</QuickGrid>
<Paginator State="Pagination"></Paginator>

@code {
    private GridItemsProvider<EmployeeResponseModel>? GridEmployeesProvider { get; set; }
    private PaginationState Pagination { get; set; } = new() { ItemsPerPage = 10 };

    protected override void OnInitialized() => this.GridEmployeesProvider = this.GetGridEmployeesAsync;

    private async ValueTask<GridItemsProviderResult<EmployeeResponseModel>> GetGridEmployeesAsync(
        GridItemsProviderRequest<EmployeeResponseModel> request)
    {
        var pageNumber = request.StartIndex / this.Pagination.ItemsPerPage;

        var data = await this.EmployeesApiClient.GetEmployeesAsync(pageNumber, this.Pagination.ItemsPerPage);

        return GridItemsProviderResult.From(data.Employees, data.Total);
    }
}
