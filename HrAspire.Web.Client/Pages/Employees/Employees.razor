@page "/employees"

@inject EmployeesApiClient EmployeesApiClient

<h1>Employees</h1>
<hr />

<div class="grid">
    <QuickGrid ItemsProvider="GridEmployeesProvider" Pagination="Pagination">
        <TemplateColumn Title="Full Name">
            <a href="/employees/@context.Id">@context.FullName</a>
        </TemplateColumn>
        <PropertyColumn Property="@(e => e.Position)" />
        <PropertyColumn Property="@(e => e.Department)" />
        <PropertyColumn Property="@(e => e.DateOfBirth)" />
        <PropertyColumn Property="@(e => e.CreatedOn)" />
    </QuickGrid>

    <Paginator State="Pagination"></Paginator>
</div>

@code {
    private GridItemsProvider<EmployeeResponseModel>? GridEmployeesProvider { get; set; }
    private PaginationState Pagination { get; set; } = new() { ItemsPerPage = 10 };

    protected override void OnInitialized() => this.GridEmployeesProvider = this.GetGridEmployeesAsync;

    private async ValueTask<GridItemsProviderResult<EmployeeResponseModel>> GetGridEmployeesAsync(
        GridItemsProviderRequest<EmployeeResponseModel> request)
    {
        var pageNumber = request.Count.HasValue && request.Count > 0
            ? request.StartIndex / request.Count.Value
            : 0;

        var employeesPage = await this.EmployeesApiClient.GetEmployeesPageAsync(pageNumber, this.Pagination.ItemsPerPage);

        var result = new GridItemsProviderResult<EmployeeResponseModel>
            {
                Items = employeesPage.Employees,
                TotalItemCount = employeesPage.Total,
            };

        return result;
    }
}
