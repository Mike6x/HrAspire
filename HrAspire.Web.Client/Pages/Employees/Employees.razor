@page "/employees"

@attribute [Authorize]

@inject EmployeesApiClient EmployeesApiClient

<h1>
    Employees
    <a href="/employee-create" class="btn btn-primary float-end">Create</a>
</h1>
<hr />

<QuickGrid ItemsProvider="GridEmployeesProvider" Pagination="Pagination" Class="table table-bordered table-striped">
    <TemplateColumn Title="Full Name">
        <a href="/employees/@context.Id">@context.FullName</a>
    </TemplateColumn>
    <PropertyColumn Property="@(e => e.Email)" />
    <PropertyColumn Property="@(e => e.Position)" />
    <PropertyColumn Property="@(e => e.Department)" />
    <PropertyColumn Property="@(e => e.DateOfBirth)" />
    <PropertyColumn Property="@(e => e.CreatedOn)" />
</QuickGrid>

<Paginator State="Pagination"></Paginator>

@code {
    private GridItemsProvider<EmployeeResponseModel>? GridEmployeesProvider { get; set; }
    private PaginationState Pagination { get; set; } = new() { ItemsPerPage = 10 };

    protected override void OnInitialized() => this.GridEmployeesProvider = this.GetGridEmployeesAsync;

    private async ValueTask<GridItemsProviderResult<EmployeeResponseModel>> GetGridEmployeesAsync(
        GridItemsProviderRequest<EmployeeResponseModel> request)
    {
        var pageNumber = request.StartIndex / this.Pagination.ItemsPerPage;

        var employeesPage = await this.EmployeesApiClient.GetEmployeesPageAsync(pageNumber, this.Pagination.ItemsPerPage);

        var result = new GridItemsProviderResult<EmployeeResponseModel>
            {
                Items = employeesPage.Employees,
                TotalItemCount = employeesPage.Total,
            };

        return result;
    }
}
